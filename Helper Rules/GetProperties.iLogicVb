Imports Inventor
Imports System.Reflection
Imports System
Sub Main()
	GetProperties(ThisApplication.ActiveDocument)
End Sub

Sub GetProperties(myObject As Object)
	Dim typename As String = Microsoft.VisualBasic.Information.TypeName(myObject)
	MessageBox.Show(typename)
'	typename = "Inventor." & typename
	'Dim myType = Type.GetType(typename) ' myObject.[GetType]()
	Dim myType As Type = Type.GetType(typename,True)
	'Dim myType As Type = Type.GetType(typename, True) ' myObject.[GetType]()
	If Not myType = Nothing Then
		Dim props As IList(Of PropertyInfo) = New List(Of PropertyInfo)(myType.GetProperties())
		Dim propstr As String = String.Empty
		MessageBox.Show(props.Count)
		For Each prop As PropertyInfo In props
			Dim propValue As Object = prop.GetValue(myObject, Nothing)
			If propstr = String.Empty Then
				propstr = propValue.ToString()
			Else
				propstr = propstr & vbCrLf & propValue.ToString()
			End If
		Next
		MessageBox.Show("Resultant properties of myobject: " & myObject.ToString() & " were: " & propstr)
	Else
		Messagebox.Show("we broke it.")
	End If
End Sub

'Private Sub SurroundingSub()
'    Dim prop As System.Reflection.PropertyInfo = GetType(PartDocument).GetProperty("FullFilename")
'    query = query.OrderBy(Function(x) prop.GetValue(x, Nothing))
'End Sub

' not sure this will work: ?
'Private Sub SurroundingSub()
'    typeName = Microsoft.VisualBasic.Information.TypeName(someCOMObject)

'    For Each assembly As System.Reflection.Assembly In AppDomain.CurrentDomain.GetAssemblies()

'        For Each type As Type In assembly.GetTypes()
'            If (TryCast(someCOMObject, type)) IsNot Nothing Then fullTypeName = type.FullName
'        Next
'    Next
'End Sub
