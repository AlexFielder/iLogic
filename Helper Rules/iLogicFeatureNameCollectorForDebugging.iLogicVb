'Option infer On

AddReference "C:\Program Files\Autodesk\Inventor 2019\Bin\Autodesk.iLogic.dll"
AddReference "C:\Program Files\Autodesk\Inventor 2019\Bin\Autodesk.iLogic.Core.dll"
AddReference "C:\Program Files\Autodesk\Inventor 2019\Bin\Autodesk.iLogic.CommonUI.dll"

Imports System.Text
'Imports AI = Autodesk.iLogic
Imports AIC = Autodesk.iLogic.Core
Imports Autodesk.InventorAddins.Common
Imports Inventor
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Resources
Imports iLogic
Imports iLogic.Commands
Imports iLogic.EntityNameStorage
'Imports iLogic.My.Resources
Imports System.Globalization
'Imports System.Windows.Forms
Sub main()
	Dim oObj As Object = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kAllEntitiesFilter, "Select a Face, Edge or Vertex")
	If Not oObj Is Nothing Then
		Dim defaultResponseFromType As String = TypeName(oObj) & "Geom001"
		Dim newAttributeName As String = InputBox("What name for the geometry?", "Naming day", defaultResponseFromType)
		Dim entSetBase As EntityNaming = New EntityNaming(New EntityNameListAttributeSet(ThisDoc.Document), oObj)
Break
'		If Not entSetBase.
'		If Not iLogic.EntityNameStorage.EntityAttributeSetBase
'		MessageBox.Show(GetFeaturesString(oObj))
	End If
	
'	Dim addNamed As AddEditNameEntityCommand = New AddEditNameEntityCommand()
'	addNamed.CommandDisplayName = "Add Named Geometry"
'	addNamed.CommandId = "AddNamedGeometry"
'	addNamed.Execute()

	
End Sub

Function GetFeaturesString(ByVal entity As Object) As String
    Select Case True 'CadObjectUtil.GetObjectType(entity)
        Case TypeOf entity Is Face
            Dim ReferenceKey As Byte() = New Byte() {}
			Dim selectedFace As Face = entity
            selectedFace.CreatedByFeature.GetReferenceKey(ReferenceKey)
            Dim referenceKeyManager As ReferenceKeyManager = ThisDoc.Document.ReferenceKeyManager
            Dim ReferenceKey2 As Byte() = ReferenceKey
            Return referenceKeyManager.KeyToString(ReferenceKey2) & vbTab
        Case TypeOf entity Is Edge
            Return GetFeaturesString((CType(entity, Edge)).Faces)
        Case TypeOf entity Is Vertex
            Return GetFeaturesString((CType(entity, Vertex)).Faces)
        Case Else
            Return String.Empty
    End Select
End Function

Function GetFeaturesString(ByVal faces As Faces) As String
    Dim hashSet As HashSet(Of String) = New HashSet(Of String)()
    Dim ReferenceKey As Byte() = New Byte(-1) {}

    For Each face As Face In faces
        Face.CreatedByFeature.GetReferenceKey(ReferenceKey)
        Dim hashSet2 As HashSet(Of String) = hashSet
        Dim referenceKeyManager As ReferenceKeyManager = ThisDoc.Document.ReferenceKeyManager
        Dim ReferenceKey2 As Byte() = ReferenceKey
        hashSet2.Add(referenceKeyManager.KeyToString(ReferenceKey2))
    Next

    Dim stringBuilder As StringBuilder = New StringBuilder()

    For Each item As String In hashSet
        stringBuilder.Append(item)
        stringBuilder.Append(vbTab)
    Next

    Return stringBuilder.ToString()
End Function

Class NamedEntityGraphics
    Private Const NamedEntityGraphicsID As String = "NamedEntityGraphicsID"
    Private ReadOnly m_partDoc As PartDocument
    Private ReadOnly m_app As Inventor.Application
    Private ReadOnly m_pickedNode As GraphicsNode
    Private Shared Counter As Integer = 100
    Private Const ColorId As Integer = 10

    Public Property RemovedBySketchEnv As Boolean
        Get
            Return (CType(m_partDoc.GraphicsDataSetsCollection("NamedEntityGraphicsID").get_ItemById(10), GraphicsColorSet)).get_Color(1).Opacity = 0.0
        End Get
        Set(ByVal value As Boolean)
            Dim obj As GraphicsColorSet = CType(m_partDoc.GraphicsDataSetsCollection("NamedEntityGraphicsID").get_ItemById(10), GraphicsColorSet)
            Dim Color As Color = obj.get_Color(1)
            Color.Opacity = (If((Not value), 1, 0))
            obj.set_Color(1, Color)
        End Set
    End Property

    Public Sub New(ByVal doc As PartDocument, ByVal app As Inventor.Application, ByVal pickedNode As GraphicsNode)
        m_partDoc = doc
        m_app = app
        m_pickedNode = pickedNode
    End Sub

    Public Function HasGraphics() As Boolean
        Return m_partDoc.ComponentDefinition.ClientGraphicsCollection("NamedEntityGraphicsID").Count <> 0
    End Function

    Public Sub SetVisible(ByVal visibility As Boolean)
        m_partDoc.ComponentDefinition.ClientGraphicsCollection("NamedEntityGraphicsID").Visible = (If(visibility, GraphicsVisibilityEnum.kAllGraphicsVisible, GraphicsVisibilityEnum.kNoGraphicsVisible))
        m_app.ActiveView.Update()
    End Sub

    Public Function Update(ByVal oldName As String, ByVal newName As String, ByVal entityObject As Object) As GraphicsNode
        Dim GraphicsDataSets As GraphicsDataSets = Nothing
        Dim ClientGraphics As ClientGraphics = Nothing
        Dim GraphicsColorSet As GraphicsColorSet = Nothing
        Dim ComponentDefinition As PartComponentDefinition = m_partDoc.ComponentDefinition

        Try
            GraphicsDataSets = m_partDoc.GraphicsDataSetsCollection("NamedEntityGraphicsID")
            ClientGraphics = ComponentDefinition.ClientGraphicsCollection("NamedEntityGraphicsID")
        Catch __unusedException1__ As Exception
            GraphicsDataSets = m_partDoc.GraphicsDataSetsCollection.Add("NamedEntityGraphicsID")
            ClientGraphics = ComponentDefinition.ClientGraphicsCollection.Add("NamedEntityGraphicsID")
            ClientGraphics.Selectable = GraphicsSelectabilityEnum.kAllGraphicsSelectable
            GraphicsColorSet = GraphicsDataSets.CreateColorSet(10)
            GraphicsColorSet.Add(1, 0, 0, 0)
        End Try

        If oldName.Length <> 0 Then
            Dim GraphicsNode As GraphicsNode = FindGraphicsNode(oldName, ClientGraphics)

            If GraphicsNode IsNot Nothing Then
                GraphicsNode.DisplayName = newName

                If True Then

                    For Each item As GraphicsPrimitive In GraphicsNode
                        Dim TextGraphics As TextGraphics = TryCast(item, TextGraphics)

                        If TextGraphics IsNot Nothing Then
                            TextGraphics.Text = newName
                            Return GraphicsNode
                        End If
                    Next

                    Return GraphicsNode
                End If
            End If
        End If

        Dim graphicsNode2 As GraphicsNode = ClientGraphics.AddNode(Counter)
        graphicsNode2.DisplayName = newName
        graphicsNode2.Selectable = True
        'Dim objectType As ObjectTypeEnum = CadObjectUtil.GetObjectType(entityObject)
        Dim point As Point = Nothing
        Dim array As Double() = Nothing

        Select Case True 'objectType
            Case TypeOf entityObject Is Face
                Dim face As Face = CType(entityObject, Face)
                Dim MinPoint As Double() = New Double(1) {}
                Dim MaxPoint As Double() = New Double(1) {}
                Dim evaluator As SurfaceEvaluator = face.Evaluator
                evaluator.ParamRangeRect.GetBoxData(MinPoint, MaxPoint)
                Dim num As Double = MaxPoint(0) - MinPoint(0)
                Dim num2 As Double = MaxPoint(1) - MinPoint(1)

                If face.SurfaceType = SurfaceTypeEnum.kPlaneSurface Then
                    MinPoint(0) += num / 2.0
                    MinPoint(1) += num2 / 2.0

                    If evaluator.get_IsParamOnFace(MinPoint) Then
                        Dim Points As Double() = New Double(2) {}
                        evaluator.GetPointAtParam(MinPoint, Points)
                        point = m_app.TransientGeometry.CreatePoint(Points(0), Points(1), Points(2))
                    Else
                        point = face.PointOnFace
                    End If

                    Exit Select
                End If

                Dim num3 As Double = If((MinPoint(0) < 0.0), 0.3, (-0.3))
                MinPoint(0) += (If((num > 1.5), num3, (num * 0.45)))
                MinPoint(1) += num2 * 0.45

                If evaluator.get_IsParamOnFace(MinPoint) Then
                    Dim Points2 As Double() = New Double(2) {}
                    evaluator.GetPointAtParam(MinPoint, Points2)
                    point = m_app.TransientGeometry.CreatePoint(Points2(0), Points2(1), Points2(2))
                    MinPoint(0) += (If((num > 1.5), num3, (num * 0.45)))
                    array = New Double(2) {Points2(0), Points2(1), Points2(2)}
                    evaluator.GetPointAtParam(MinPoint, Points2)

                    For i As Integer = 0 To array.Length - 1
                        array(i) -= Points2(i)
                    Next
                Else
                    point = face.PointOnFace
                End If

                Exit Select
            Case TypeOf entityObject Is Edge 'ObjectTypeEnum.kEdgeObject
                point = (CType(entityObject, Edge)).PointOnEdge
            Case TypeOf entityObject Is Vertex 'ObjectTypeEnum.kVertexObject
                point = (CType(entityObject, Vertex)).Point
        End Select

        Dim normalVector As Tuple(Of Vector, Double) = GetNormalVector(objectType, entityObject, point, array)
        Dim vector As Vector = normalVector.Item1.Copy()
        vector.Normalize()
        Dim num4 As Double = 0.0058 * normalVector.Item2
        vector.ScaleBy(num4 * 4.0)
        Dim point2 As point = point.Copy()
        point2.TranslateBy(vector)
        Dim surfaces As SurfaceBody = m_app.TransientBRep.CreateSolidCylinderCone(point2, point, num4, num4, 0.0, Type.Missing)
        Dim Coords As Double() = New Double(2) {}
        point.GetPointData(Coords)
        Dim list As List(Of Double) = New List(Of Double)(6)
        list.AddRange(Coords)
        point.TranslateBy(normalVector.Item1)
        point.GetPointData(Coords)
        list.AddRange(Coords)
        Dim textGraphics2 As TextGraphics = graphicsNode2.AddTextGraphics()
        textGraphics2.Text = newName
        textGraphics2.Bold = True
        textGraphics2.Anchor = point
        textGraphics2.VerticalAlignment = VerticalTextAlignmentEnum.kAlignTextLower
        textGraphics2.HorizontalAlignment = HorizontalTextAlignmentEnum.kAlignTextCenter
        textGraphics2.BurnThrough = False
        textGraphics2.PutTextColor(0, Byte.MaxValue, 0)
        textGraphics2.FontSize = 22.0
        textGraphics2.Font = "Tahoma"
        Dim graphicsCoordinateSet As GraphicsCoordinateSet = graphicsDataSets.CreateCoordinateSet(Math.Min(System.Threading.Interlocked.Increment(Counter), Counter - 1))
        Dim graphicsCoordinateSet2 As graphicsCoordinateSet = graphicsCoordinateSet
        Dim Coordinates As Double() = list.ToArray()
        graphicsCoordinateSet2.PutCoordinates(Coordinates)
        graphicsNode2.AddLineGraphics().CoordinateSet = graphicsCoordinateSet
        Dim surfaceGraphics As SurfaceGraphics = graphicsNode2.AddSurfaceGraphics(surfaces)

        If graphicsColorSet Is Nothing Then
            graphicsColorSet = CType(graphicsDataSets.get_ItemById(10), graphicsColorSet)
        End If

        surfaceGraphics.Color = graphicsColorSet.get_Color(1)
        Return graphicsNode2
    End Function

    Public Function Delete() As HashSet(Of String)
        Dim hashSet As HashSet(Of String) = New HashSet(Of String)()
        Dim clientGraphics As ClientGraphics = m_partDoc.ComponentDefinition.ClientGraphicsCollection("NamedEntityGraphicsID")
        Dim graphicsDataSets As GraphicsDataSets = m_partDoc.GraphicsDataSetsCollection("NamedEntityGraphicsID")

        For Each item As GraphicsNode In clientGraphics
            hashSet.Add(item.DisplayName)
            graphicsDataSets.get_ItemById(item.Id).Delete()
            item.Delete()
        Next

        Return hashSet
    End Function

    Public Function Delete(ByVal entityName As String) As Boolean
        Dim graphicsDataSets As GraphicsDataSets
        Dim graphicsNode As GraphicsNode = FindGraphicsNode(entityName, graphicsDataSets)

        If graphicsNode IsNot Nothing Then
            graphicsDataSets.get_ItemById(graphicsNode.Id).Delete()
            graphicsNode.Delete()
            Return True
        End If

        Return False
    End Function

    Public Function IsLabelNodeAvailable(ByVal entityName As String) As Boolean
        Dim graphicsDataSets As GraphicsDataSets
        Return FindGraphicsNode(entityName, graphicsDataSets) IsNot Nothing
    End Function

    Public Function FindGraphicsNode(ByVal entityName As String, ByRef graphicsDataSets As GraphicsDataSets) As GraphicsNode
        Dim clientGraphics As ClientGraphics = Nothing

        Try
            graphicsDataSets = m_partDoc.GraphicsDataSetsCollection("NamedEntityGraphicsID")
            clientGraphics = m_partDoc.ComponentDefinition.ClientGraphicsCollection("NamedEntityGraphicsID")
        Catch __unusedException1__ As Exception
            graphicsDataSets = Nothing
            Return Nothing
        End Try

        Dim graphicsNode As GraphicsNode = m_pickedNode

        If graphicsNode Is Nothing OrElse graphicsNode.DisplayName <> entityName Then
            graphicsNode = FindGraphicsNode(entityName, clientGraphics)
        End If

        Return graphicsNode
    End Function

    Private Function FindGraphicsNode(ByVal entityName As String, ByVal clientGraphics As ClientGraphics) As GraphicsNode
        For Each clientGraphic As GraphicsNode In clientGraphics

            If clientGraphic.DisplayName = entityName Then
                Return clientGraphic
            End If
        Next

        Return Nothing
    End Function

    Private Function GetNormalVector(ByVal objectType As ObjectTypeEnum, ByVal entityObject As Object, ByVal pickedPoint As Point, ByVal faceDirection As Double()) As Tuple(Of Vector, Double)
        Dim surfaceBody As SurfaceBody = Nothing
        Dim array As Double() = New Double(2) {}

        Select Case objectType
            Case ObjectTypeEnum.kFaceObject
                Dim face3 As Face = CType(entityObject, Face)
                array = GetFaceNormal(face3, pickedPoint)
                surfaceBody = face3.SurfaceBody
                Exit Select
            Case ObjectTypeEnum.kEdgeObject

                For Each face4 As Face In (CType(entityObject, Edge)).Faces
                    Dim faceNormal2 As Double() = GetFaceNormal(face4, pickedPoint)
                    AddVec(array, faceNormal2)

                    If surfaceBody Is Nothing Then
                        surfaceBody = face4.SurfaceBody
                    End If
                Next

            Case ObjectTypeEnum.kVertexObject

                For Each face5 As Face In (CType(entityObject, Vertex)).Faces
                    Dim faceNormal As Double() = GetFaceNormal(face5, pickedPoint)
                    AddVec(array, faceNormal)

                    If surfaceBody Is Nothing Then
                        surfaceBody = face5.SurfaceBody
                    End If
                Next
        End Select

        Dim vector As Vector = m_app.TransientGeometry.CreateVector(array(0), array(1), array(2))
        vector.Normalize()
        Dim item As Double = AddDeviation(vector, pickedPoint, surfaceBody, faceDirection)
        Return New Tuple(Of vector, Double)(vector, item)
    End Function

    Private Function GetFaceNormal(ByVal face As Face, ByVal pickedPoint As Point) As Double()
        Dim Coords As Double() = New Double(2) {}
        pickedPoint.GetPointData(Coords)
        Dim evaluator As SurfaceEvaluator = face.Evaluator
        Dim Normals As Double() = New Double(2) {}
        evaluator.GetNormalAtPoint(Coords, Normals)
        Return Normals
    End Function

    Private Sub AddVec(ByVal vec1 As Double(), ByVal vec2 As Double())
        vec1(0) += vec2(0)
        vec1(1) += vec2(1)
        vec1(2) += vec2(2)
    End Sub

    Private Function AddDeviation(ByVal vector As Vector, ByVal pickedPoint As Point, ByVal surfaceBody As SurfaceBody, ByVal faceDirection As Double()) As Double
        Dim Coords As Double() = New Double(2) {}
        vector.GetVectorData(Coords)

        If faceDirection IsNot Nothing Then
            vector.PutVectorData(faceDirection)
            vector.Normalize()
            vector.GetVectorData(faceDirection)
        End If

        Dim array As Double() = New Double(2) {}
        Dim isSolid As Boolean = surfaceBody.IsSolid
        Dim Coords2 As Double() = Nothing

        If isSolid Then
            Coords2 = New Double(2) {}
            pickedPoint.GetPointData(Coords2)
        End If

        Dim rangeBox As Box = surfaceBody.RangeBox
        Dim num As Double = rangeBox.MaxPoint.DistanceTo(rangeBox.MinPoint)
        Dim num2 As Double = num * (If((faceDirection Is Nothing), 0.25, 0.18))
        Dim point As Point = pickedPoint.Copy()
        Dim flag As Boolean = False

        Do

            For i As Integer = 0 To array.Length - 1
                array(i) = (If((faceDirection Is Nothing), (Coords(i) * num2), ((Coords(i) + faceDirection(i)) * num2)))
            Next

            If faceDirection Is Nothing Then
                Dim num3 As Double = (From x In array Select Math.Abs(x)).Max()

                If num3 = Math.Abs(array(1)) Then
                    array(0) += num3 * 0.5 * CDbl((If((Not (array(0) < 0.0)), 1, (-1))))
                Else
                    array(1) += num3 * 0.5 * CDbl((If((Not (array(1) < 0.0)), 1, (-1))))
                End If
            End If

            If isSolid Then
                Dim solidPoint As Double() = New Double(2) {Coords2(0) + array(0), Coords2(1) + array(1), Coords2(2) + array(2)}

                If faceDirection Is Nothing Then
                    flag = (surfaceBody.get_IsPointInside(solidPoint, UseBox:=False) <> ContainmentEnum.kOutsideContainment)
                Else
                    point.PutPointData(solidPoint)
                    flag = rangeBox.Contains(point)

                    If flag Then

                        For j As Integer = 0 To array.Length - 1
                            array(j) = 0.0 - array(j)
                            solidPoint(j) = Coords2(j) + array(j)
                        Next

                        point.PutPointData(solidPoint)
                        flag = rangeBox.Contains(Point)
                    End If
                End If
            End If

                        ''' Cannot convert ExpressionStatementSyntax, System.ArgumentOutOfRangeException: Exception of type 'System.ArgumentOutOfRangeException' was thrown.
''' Parameter name: op
''' Actual value was MultiplyAssignmentStatement.
'''    at ICSharpCode.CodeConverter.Util.VBUtil.GetExpressionOperatorTokenKind(SyntaxKind op)
'''    at ICSharpCode.CodeConverter.VB.NodesVisitor.MakeAssignmentStatement(AssignmentExpressionSyntax node)
'''    at ICSharpCode.CodeConverter.VB.NodesVisitor.VisitAssignmentExpression(AssignmentExpressionSyntax node)
'''    at Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
'''    at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.Visit(SyntaxNode node)
'''    at ICSharpCode.CodeConverter.VB.CommentConvertingNodesVisitor.DefaultVisit(SyntaxNode node)
'''    at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAssignmentExpression(AssignmentExpressionSyntax node)
'''    at Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
'''    at ICSharpCode.CodeConverter.VB.MethodBodyVisitor.ConvertSingleExpression(ExpressionSyntax node)
'''    at ICSharpCode.CodeConverter.VB.MethodBodyVisitor.VisitExpressionStatement(ExpressionStatementSyntax node)
'''    at Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
'''    at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.Visit(SyntaxNode node)
'''    at ICSharpCode.CodeConverter.VB.CommentConvertingMethodBodyVisitor.ConvertWithTrivia(SyntaxNode node)
'''    at ICSharpCode.CodeConverter.VB.CommentConvertingMethodBodyVisitor.DefaultVisit(SyntaxNode node)
''' 
''' Input: 
''' 			num2 *= 1.5;

''' 
        Loop While flag

        Dim Coords3 As Double() = array
        vector.PutVectorData(Coords3)
        Return num
    End Function
End Class


Class AddEditNameEntityCommand
    Inherits NameEntityCommand

    Protected Overrides Sub OnExecute()
        Dim dictionary As Dictionary(Of Object, GraphicsNode) = New Dictionary(Of Object, GraphicsNode)()
        Dim doc As Document = Nothing

        If GetCommandInputs(dictionary, doc) Then

            If Not doc.IsModifiable Then
                Dim message As String = String.Format(CultureInfo.CurrentCulture, "Cannot edit Library File", MyBase.CommandDisplayName, doc.DisplayName)
                ShowExceptionDialog.ShowException(New Exception(), MyBase.CommandDisplayName, message)
            Else
                Dim instance As StandardAddInServer = StandardAddInServer.Instance
'                instance.MyUserInputEvts.ActivateCommand()

                Try
                    Dim entityNameListAttributeSet As EntityNameListAttributeSet = New EntityNameListAttributeSet(doc, MyBase.ThisApplication)
                    entityNameListAttributeSet.SetTransactionName("MigrateETONames")
                    Dim flag As Boolean = entityNameListAttributeSet.MigrateETONames(createiLogicNames:=True)

                    If Not entityNameListAttributeSet.LabelsGraphicsInitialized AndAlso entityNameListAttributeSet.GetNames().Count <> 0 Then
                        entityNameListAttributeSet.SetTransactionName("Show Labels")
                        entityNameListAttributeSet.ShowHideAll(show:=True)
                        flag = True
                    End If

                    Dim entityName As String

'commented because unneccessary
'                    Using entityNameDialog As EntityNameDialog = New EntityNameDialog(doc, dictionary.Keys.First())

'                        If entityNameDialog.ShowDialog() <> DialogResult.OK Then
'                            Return
'                        End If

'                        entityName = entityNameDialog.EntityName
'                    End Using

                    entityNameListAttributeSet.SetTransactionName(MyBase.CommandDisplayName)

                    If entityNameListAttributeSet.Update(entityName, dictionary.Keys.First()) = entityNameListAttributeSet.UpdateStatus.Done Then
                        flag = True
                    End If

                    If flag Then
                        instance.EntityNameBrowserUpdate(flag)
                    End If

                Catch ex As Exception
                    ShowExceptionDialog.ShowException(ex, MyBase.CommandDisplayName)
                Finally
'                    instance.MyUserInputEvts.TerminateCommand()
                End Try
            End If
        End If
    End Sub
End Class

Class NameEntityCommand
    Inherits SimpleCommand

    Public Sub New()
        MyBase.New(StandardAddInServer.Instance.Application)
    End Sub

    Protected Overrides Sub OnExecute()
    End Sub

    Protected Function GetCommandInputs(ByVal selectedEntities As Dictionary(Of Object, GraphicsNode), ByRef doc As Document) As Boolean
        doc = MyBase.ThisApplication.ActiveEditDocument

        If doc Is Nothing OrElse TypeOf MyBase.ThisApplication.ActiveEditObject Is FlatPattern Then
            Return False
        End If

        Dim selectSet As SelectSet = doc.SelectSet

        If selectSet.Count = 0 Then
            Return False
        End If

        For Each item As Object In selectSet
            Dim obj As Object = Nothing
            Dim graphicsNode As GraphicsNode = Nothing

            Select Case CadObjectUtil.GetObjectType(item)
                Case ObjectTypeEnum.kFaceObject, ObjectTypeEnum.kEdgeObject, ObjectTypeEnum.kVertexObject
                    obj = item
                Case ObjectTypeEnum.kFaceProxyObject
                    obj = (CType(item, FaceProxy)).NativeObject
                Case ObjectTypeEnum.kEdgeProxyObject
                    obj = (CType(item, EdgeProxy)).NativeObject
                Case ObjectTypeEnum.kVertexProxyObject
                    obj = (CType(item, VertexProxy)).NativeObject
                Case Else
                    graphicsNode = (TryCast(item, graphicsNode))

                    If graphicsNode IsNot Nothing Then
                        obj = New EntityNameListAttributeSet(doc).GetEntity(graphicsNode.DisplayName)
                    End If
            End Select

            If obj IsNot Nothing Then
                Dim value As graphicsNode
                Dim flag As Boolean = selectedEntities.TryGetValue(obj, value)

                If Not flag OrElse (flag AndAlso value Is Nothing AndAlso graphicsNode IsNot Nothing) Then
                    selectedEntities(obj) = graphicsNode
                End If
            End If
        Next

        Return selectedEntities.Count <> 0
    End Function
End Class

'<CLSCompliant(False)>
Public MustInherit Class SimpleCommand
    Inherits Autodesk.InventorAddins.Common.Command

    Private ReadOnly m_stopActiveCommand As Boolean

    Protected Sub New(ByVal Application As Inventor.Application)
        Me.New(Application, stopActiveCommand:=True)
    End Sub

    Protected Sub New(ByVal Application As Inventor.Application, ByVal stopActiveCommand As Boolean)
        MyBase.New(Application)
        m_stopActiveCommand = stopActiveCommand
    End Sub

    Protected Overrides Sub OnExecuteCommand()
        If m_stopActiveCommand Then
            MyBase.ThisApplication.CommandManager.StopActiveCommand()
        End If

        OnExecute()
    End Sub

    Protected Overrides Sub OnTerminateCommand()
    End Sub

    Protected MustOverride Sub OnExecute()
End Class

Class EntityNameListAttributeSet
    Inherits EntityAttributeSetBase

    Public Enum UpdateStatus
        Done
        NoChange
        [Error]
    End Enum

    Private Const EntityNamesVisibleAtt As String = "iLogicEntityNamesVisible"
    Private Const EntityNameAtt As String = "iLogicEntityName"
    Private Const EntityNameFeatNameAtt As String = "iLogicEntityNameFeatureName"
    Private Const EntityNamesOrdered As String = "iLogicEntityNamesOrdered"
    Private Const OrderSplitChar As Char = vbTab
    Private ReadOnly m_app As Inventor.Application
    Private ReadOnly m_pickedNode As GraphicsNode

    Public ReadOnly Property LabelsGraphicsInitialized As Boolean
        Get
            Return GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSetTransient", "iLogicEntityNamesVisible") IsNot Nothing
        End Get
    End Property

    Public Sub New(ByVal doc As Document, ByVal Optional app As Inventor.Application = Nothing, ByVal Optional pickedNode As GraphicsNode = Nothing)
        MyBase.New(app, doc)
        m_app = app
        m_pickedNode = pickedNode
    End Sub

    Public Overrides Function GetEntityName(ByVal entityObject As Object) As String
        Dim entityAttSets As AttributeSets = GetEntityAttSets(GetNativeObject(entityObject))

        If entityAttSets Is Nothing Then
            Return String.Empty
        End If

        Dim Attribute As Inventor.Attribute = GetAttribute(entityAttSets, "iLogicEntityNameSet", "iLogicEntityName")

        If Attribute IsNot Nothing Then
            Return TryCast(Attribute.Value, String)
        End If

        Return String.Empty
    End Function

    Public Overrides Function GetEntity(ByVal name As String) As Object
        If name.Length <> 0 Then
            Dim ObjectCollection As ObjectCollection = m_doc.AttributeManager.FindObjects("iLogicEntityNameSet", "iLogicEntityName", name)

            If ObjectCollection.Count <> 0 Then
                Return objectCollection(1)
            End If
        End If

        Return Nothing
    End Function

    Public Overrides Function ContainsName(ByVal name As String) As Boolean
        If m_usedNames Is Nothing Then
            m_usedNames = New HashSet(Of String)(StringComparer.OrdinalIgnoreCase)

            For Each item As Inventor.Attribute In m_doc.AttributeManager.FindAttributes("iLogicEntityNameSet", "iLogicEntityName", Type.Missing)
                m_usedNames.Add(TryCast(item.Value, String))
            Next
        End If

        Return m_usedNames.Contains(name)
    End Function

    Friend Function GetNamedEntities() As List(Of NamedEntity)
        Dim AttributesEnumerator As AttributesEnumerator = m_doc.AttributeManager.FindAttributes("iLogicEntityNameSet", "iLogicEntityName", Type.Missing)
        Dim list As List(Of NamedEntity) = New List(Of NamedEntity)(AttributesEnumerator.Count)

        For Each item As Inventor.Attribute In AttributesEnumerator
            Dim AttributeSet As AttributeSet = TryCast(item.Parent, AttributeSet)

            If AttributeSet IsNot Nothing Then
                Dim AttributeSets As AttributeSets = TryCast(AttributeSet.Parent, AttributeSets)

                If AttributeSets IsNot Nothing Then
                    Dim parent As Object = AttributeSets.Parent

                    If parent IsNot Nothing Then
                        list.Add(New NamedEntity(CStr(item.Value), parent))
                    End If
                End If
            End If
        Next

        Return list
    End Function

    Public Function LabelsHidden() As Boolean
        Dim Attribute As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSetTransient", "iLogicEntityNamesVisible")

        If attribute IsNot Nothing Then

            If Not New NamedEntityGraphics(CType(m_doc, PartDocument), Nothing, Nothing).HasGraphics() Then
                Return True
            End If

            Return (CStr(attribute.Value)).Length = 0
        End If

        Return True
    End Function

    Public Function IsOrdered() As Boolean
        Dim attribute As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSet", "iLogicEntityNamesOrdered")

        If attribute IsNot Nothing Then
            Dim Text As String = TryCast(attribute.Value, String)

            If text IsNot Nothing AndAlso text.Length > 0 AndAlso text(0) = vbTab Then
                Return True
            End If
        End If

        Return False
    End Function

    Public Function GetNames() As List(Of String)
        Dim attribute As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSet", "iLogicEntityNamesOrdered")

        If attribute Is Nothing Then
            Return New List(Of String)()
        End If

        Dim wasOrdered As Boolean
        Return GetNamesFromAttribute(attribute, wasOrdered)
    End Function

    Public Function GetLeakedNames() As HashSet(Of String)
        Dim result As HashSet(Of String) = Nothing
        Dim PreviewResult As Object = Nothing
        m_doc.AttributeManager.PurgeAttributeSets("iLogicEntityNameSet", Preview:=True, PreviewResult:= PreviewResult)
        Dim AttributeSetsEnumerator As AttributeSetsEnumerator = Nothing

        If CSharpImpl.__Assign(AttributeSetsEnumerator, TryCast(PreviewResult, AttributeSetsEnumerator)) IsNot Nothing AndAlso AttributeSetsEnumerator.Count <> 0 Then
            result = New HashSet(Of String)()

            If True Then

                For Each item As AttributeSet In AttributeSetsEnumerator

                    If item.get_NameIsUsed("iLogicEntityName") Then
                        Dim Attribute As Inventor.Attribute = item("iLogicEntityName")
                        result.Add(CStr(Attribute.Value))
                    End If
                Next

                Return result
            End If
        End If

        Return result
    End Function

    Public Function IsLabelVisible(ByVal entityObject As Object, ByVal Optional name As String = Nothing) As Boolean
        Dim namedEntityGraphics As NamedEntityGraphics = New NamedEntityGraphics(CType(m_doc, PartDocument), Nothing, m_pickedNode)

        If name Is Nothing Then
            Return namedEntityGraphics.IsLabelNodeAvailable(GetEntityName(GetNativeObject(entityObject)))
        End If

        Return namedEntityGraphics.IsLabelNodeAvailable(name)
    End Function

    Public Function Update(ByVal newEntityName As String, ByVal selectedObject As Object) As UpdateStatus
        Dim nativeObject As Object = GetNativeObject(selectedObject)
        Dim entityAttSets As AttributeSets = GetEntityAttSets(nativeObject)

        If entityAttSets Is Nothing Then
            Return UpdateStatus.[Error]
        End If

        Dim attribute As Inventor.Attribute = GetAttribute(entityAttSets, "iLogicEntityNameSet", "iLogicEntityName")
        Dim Text As String = String.Empty

        If attribute IsNot Nothing Then
            text = (TryCast(attribute.Value, String))

            If text = newEntityName Then
                Return UpdateStatus.NoChange
            End If
        ElseIf String.IsNullOrEmpty(newEntityName) Then
            Return UpdateStatus.[Error]
        End If

        Dim transaction As Transaction = StartTxn()

        Try
            Dim attribute2 As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSet", "iLogicEntityNamesOrdered")
            Dim attribute3 As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSetTransient", "iLogicEntityNamesVisible")

            If Not String.IsNullOrEmpty(newEntityName) Then

                If attribute2 Is Nothing Then
                    GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSet", "iLogicEntityNamesOrdered", CreateAtt.[New], newEntityName & vbTab)
                Else
                    UpdateOrderedNames(attribute2, newEntityName, text)
                End If

                If attribute IsNot Nothing Then
                    attribute.Value = newEntityName
                Else
                    GetAttribute(entityAttSets, "iLogicEntityNameSet", "iLogicEntityName", CreateAtt.[New], newEntityName)
                    GetAttribute(entityAttSets, "iLogicEntityNameSet", "iLogicEntityNameFeatureName", CreateAtt.[New], GetFeaturesString(nativeObject))
                End If

                If TypeOf m_doc Is PartDocument Then 'm_app IsNot Nothing AndAlso m_app.ActiveEditDocument = m_doc Then
                    Dim namedEntityGraphics As NamedEntityGraphics = New NamedEntityGraphics(CType(m_doc, PartDocument), m_app, m_pickedNode)

                    If attribute Is Nothing OrElse (attribute3 IsNot Nothing AndAlso namedEntityGraphics.IsLabelNodeAvailable(text)) Then
                        namedEntityGraphics.Update(text, newEntityName, nativeObject)

                        If attribute3 Is Nothing Then
                            GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSetTransient", "iLogicEntityNamesVisible", CreateAtt.NewTransient, newEntityName & vbTab)
                        Else
                            UpdateOrderedNames(attribute3, newEntityName, text)
                        End If
                    End If
                End If
            ElseIf attribute IsNot Nothing Then

                If m_app IsNot Nothing Then
                    Call New NamedEntityGraphics(CType(m_doc, PartDocument), m_app, m_pickedNode).Delete(Text)
                End If

                UpdateOrderedNames(attribute2, newEntityName, text)

                If attribute3 IsNot Nothing Then
                    UpdateOrderedNames(attribute3, newEntityName, text)
                End If

                attribute.Delete()
                GetAttribute(entityAttSets, "iLogicEntityNameSet", "iLogicEntityNameFeatureName").Delete()
                entityAttSets("iLogicEntityNameSet").Delete()
            End If

        Catch
            OnCatchTxnError(transaction)
            Throw
        End Try

        OnEndTxn(transaction)
        Return UpdateStatus.Done
    End Function

    Public Function SetOrdered(ByVal Order As Boolean, ByVal Optional newOrder As List(Of String) = Nothing) As Boolean
        Dim attribute As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSet", "iLogicEntityNamesOrdered")
        Dim Text As String = String.Empty

        If attribute IsNot Nothing Then
            text = (TryCast(attribute.Value, String))

            If newOrder Is Nothing AndAlso ((Order AndAlso text(0) = vbTab) OrElse (Not Order AndAlso text(0) <> vbTab)) Then
                Return False
            End If
        End If

        Dim transaction As Transaction = StartTxn()

        Try

            If attribute IsNot Nothing Then

                If Order Then
                    UpdateOrderedNames(attribute, Nothing, Nothing)
                ElseIf newOrder IsNot Nothing Then
                    Dim stringBuilder As StringBuilder = New StringBuilder()

                    For Each item As String In newOrder
                        stringBuilder.Append(item & vbTab)
                    Next

                    attribute.Value = stringBuilder.ToString()
                Else
                    attribute.Value = text.Substring(1)
                End If
            Else
                GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSet", "iLogicEntityNamesOrdered", CreateAtt.[New], If(Order, vbTab.ToString(), String.Empty))
            End If

        Catch
            OnCatchTxnError(transaction)
            Throw
        End Try

        OnEndTxn(transaction)
        Return True
    End Function

    Public Sub FlipVisibility(ByVal selectedObject As Object)
        Dim nativeObject As Object = GetNativeObject(selectedObject)
        Dim transaction As Transaction = StartTxn()

        Try
            Dim namedEntityGraphics As NamedEntityGraphics = New NamedEntityGraphics(CType(m_doc, PartDocument), m_app, m_pickedNode)
            Dim entityName As String = GetEntityName(nativeObject)
            Dim attribute As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSetTransient", "iLogicEntityNamesVisible", CreateAtt.NewTransient, entityName & vbTab)

            If attribute Is Nothing OrElse Not namedEntityGraphics.Delete(entityName) Then
                namedEntityGraphics.Update(String.Empty, entityName, nativeObject)

                If attribute IsNot Nothing Then
                    UpdateOrderedNames(attribute, entityName, String.Empty)
                End If
            ElseIf attribute IsNot Nothing Then
                UpdateOrderedNames(attribute, String.Empty, entityName)
            End If

        Catch
            OnCatchTxnError(transaction)
            Throw
        End Try

        OnEndTxn(transaction)
    End Sub

    Public Sub ShowHideAll(ByVal show As Boolean)
        Dim transaction As Transaction = StartTxn()

        Try
            Dim attribute As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSetTransient", "iLogicEntityNamesVisible")
            Dim namedEntityGraphics As NamedEntityGraphics = New NamedEntityGraphics(CType(m_doc, PartDocument), m_app, Nothing)

            If attribute IsNot Nothing Then
                namedEntityGraphics.Delete()
            End If

            Dim text2 As String

            If show Then
                ContainsName(String.Empty)
                Dim stringBuilder As StringBuilder = New StringBuilder()

                For Each item As Inventor.Attribute In m_doc.AttributeManager.FindAttributes("iLogicEntityNameSet", "iLogicEntityName", Type.Missing)
                    Dim Text As String = CStr(item.Value)
                    stringBuilder.Append(text)
                    stringBuilder.Append(vbTab)
                    Dim entity As Object = GetEntity(text)

                    If entity IsNot Nothing Then
                        namedEntityGraphics.Update(String.Empty, text, entity)
                    End If
                Next

                text2 = stringBuilder.ToString()
            Else
                text2 = String.Empty
            End If

            If attribute IsNot Nothing Then
                attribute.Value = text2
            Else
                GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSetTransient", "iLogicEntityNamesVisible", CreateAtt.NewTransient, text2)
            End If

        Catch
            OnCatchTxnError(transaction)
            Throw
        End Try

        OnEndTxn(transaction)
    End Sub

    Public Sub DeleteLeakedName(ByVal name As String)
        Dim PreviewResult As Object = Nothing
        m_doc.AttributeManager.PurgeAttributeSets("iLogicEntityNameSet", Preview:=True, PreviewResult:= PreviewResult)
        Dim attributeSetsEnumerator As AttributeSetsEnumerator = TryCast(PreviewResult, AttributeSetsEnumerator)

        If attributeSetsEnumerator IsNot Nothing AndAlso attributeSetsEnumerator.Count <> 0 Then
            Dim transaction As Transaction = StartTxn()

            Try

                For Each item As AttributeSet In attributeSetsEnumerator

                    If DeleteNamedAttributeSet(item, name) Then
                        Exit For
                    End If
                Next

            Catch
                OnCatchTxnError(transaction)
                Throw
            End Try

            OnEndTxn(transaction)
        End If
    End Sub

    Public Sub ClearDeletedNamesAndRebuild(ByVal Optional deletedFeature As PartFeature = Nothing)
        ContainsName(String.Empty)

        If m_usedNames.Count = 0 Then
            Return
        End If

        Dim transaction As Transaction = Nothing
        Dim dictionary As Dictionary(Of Object, String) = New Dictionary(Of Object, String)(m_usedNames.Count)
        Dim value As String = Nothing

        For Each usedName As String In m_usedNames
            Dim entity As Object = GetEntity(usedName)

            If entity IsNot Nothing Then

                If Not dictionary.TryGetValue(entity, value) Then
                    dictionary.Add(entity, usedName)
                Else

                    If transaction Is Nothing Then
                        transaction = StartTxn()
                    End If

                    Dim Text As String = usedName

                    If GetEntityName(entity) = usedName Then
                        text = value
                        dictionary(entity) = usedName
                    End If

                    For Each item As Inventor.Attribute In m_doc.AttributeManager.FindAttributes("iLogicEntityNameSet", "iLogicEntityName", text)
                        Dim attributeSet As AttributeSet = TryCast(item.Parent, AttributeSet)

                        If attributeSet IsNot Nothing AndAlso DeleteNamedAttributeSet(attributeSet, text) Then
                            Exit For
                        End If
                    Next
                End If
            End If
        Next

        Dim namedEntityGraphics As NamedEntityGraphics = New NamedEntityGraphics(CType(m_doc, PartDocument), m_app, Nothing)
        Dim flag As Boolean = False
        Dim attribute As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSetTransient", "iLogicEntityNamesVisible")

        If attribute IsNot Nothing Then
            flag = ((CStr(attribute.Value)).Length <> 0)
            flag = flag And Not namedEntityGraphics.RemovedBySketchEnv
        End If

        If deletedFeature IsNot Nothing OrElse flag Then

            If transaction Is Nothing Then
                transaction = StartTxn()
            End If

            Try

                If deletedFeature IsNot Nothing Then
                    dictionary.Clear()
                    Dim PreviewResult As Object = Nothing
                    m_doc.AttributeManager.PurgeAttributeSets("iLogicEntityNameSet", Preview:=True, PreviewResult:=PreviewResult)
                    Dim attributeSetsEnumerator As AttributeSetsEnumerator = TryCast(PreviewResult, AttributeSetsEnumerator)

                    If attributeSetsEnumerator IsNot Nothing Then
                        Dim ReferenceKey As Byte() = New Byte(-1) {}
                        deletedFeature.GetReferenceKey(ReferenceKey)
                        Dim referenceKeyManager As ReferenceKeyManager = m_doc.ReferenceKeyManager
                        Dim ReferenceKey2 As Byte() = ReferenceKey
                        Dim value2 As String = referenceKeyManager.KeyToString(ReferenceKey2)

                        For Each item2 As AttributeSet In attributeSetsEnumerator
                            Dim attribute2 As Inventor.Attribute = item2("iLogicEntityNameFeatureName")

                            If (CStr(attribute2.Value)).Contains(value2) Then
                                attribute2.Delete()
                                item2("iLogicEntityName").Delete()
                                item2.Delete()
                            End If
                        Next
                    End If

                    m_usedNames = Nothing
                    ContainsName(String.Empty)
                    Dim attribute3 As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSet", "iLogicEntityNamesOrdered")
                    Dim wasOrdered As Boolean
                    Dim namesFromAttribute As List(Of String) = GetNamesFromAttribute(attribute3, wasOrdered)
                    namesFromAttribute.RemoveAll(Function(ByVal name As String) Not m_usedNames.Contains(name))
                    Dim stringBuilder As StringBuilder = New StringBuilder()

                    If wasOrdered Then
                        stringBuilder.Append(vbTab)
                    End If

                    For Each item3 As String In namesFromAttribute
                        stringBuilder.Append(item3 & vbTab)
                    Next

                    attribute3.Value = stringBuilder.ToString()

                    If attribute IsNot Nothing Then
                        Dim wasOrdered2 As Boolean
                        Dim namesFromAttribute2 As List(Of String) = GetNamesFromAttribute(attribute, wasOrdered2)

                        If Not wasOrdered2 Then
                            stringBuilder.Clear()

                            For Each item4 As String In namesFromAttribute2

                                If m_usedNames.Contains(item4) Then
                                    stringBuilder.Append(item4 & vbTab)
                                End If
                            Next

                            flag = (namesFromAttribute2.Count <> 0)
                            attribute.Value = stringBuilder.ToString()
                        End If
                    End If
                End If

                If flag Then
                    Dim wasOrdered3 As Boolean
                    Dim namesFromAttribute3 As List(Of String) = GetNamesFromAttribute(attribute, wasOrdered3)
                    namedEntityGraphics.Delete()

                    If namesFromAttribute3 IsNot Nothing Then

                        If dictionary.Count <> 0 Then

                            For Each item5 As KeyValuePair(Of Object, String) In dictionary

                                If namesFromAttribute3.Contains(item5.Value) Then
                                    namedEntityGraphics.Update(String.Empty, item5.Value, item5.Key)
                                End If
                            Next
                        Else

                            For Each item6 As String In namesFromAttribute3
                                Dim entity2 As Object = GetEntity(item6)

                                If entity2 IsNot Nothing Then
                                    namedEntityGraphics.Update(String.Empty, item6, entity2)
                                End If
                            Next
                        End If
                    End If
                End If

            Catch
                OnCatchTxnError(transaction)
                Throw
            End Try

            OnEndTxn(transaction)

            If transaction IsNot Nothing Then
                transaction.MergeWithPrevious = True
            End If
        End If
    End Sub

    Public Function MigrateETONames(ByVal createiLogicNames As Boolean) As Boolean
        If m_doc.DocumentType <> DocumentTypeEnum.kPartDocumentObject OrElse Not m_doc.IsModifiable Then
            Return False
        End If

        If GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSet", "iLogicEntityNamesOrdered") Is Nothing Then
            Dim entityNaming As EntityNaming = New EntityNaming(Me, Nothing)
            Dim hashSet As HashSet(Of String) = New HashSet(Of String)()
            Dim transaction As Transaction = If(createiLogicNames, StartTxn(), Nothing)

            Try

                For Each item As Object In m_doc.AttributeManager.FindObjects("Intent", "Name", Type.Missing)
                    Dim entityAttSets As AttributeSets = GetEntityAttSets(item)

                    If entityAttSets IsNot Nothing Then

                        If Not createiLogicNames Then
                            Return True
                        End If

                        Dim Text As String = CStr(entityAttSets("Intent")("Name").Value)

                        If hashSet.Contains(text) Then
                            text = entityNaming.AutoNameAdjust(text)
                        End If

                        hashSet.Add(text)
                        Update(text, item)
                    End If
                Next

            Catch
                OnCatchTxnError(transaction)
                Throw
            End Try

            OnEndTxn(transaction)
            Return hashSet.Count <> 0
        End If

        Return False
    End Function

    Private Function DeleteNamedAttributeSet(ByVal attSet As AttributeSet, ByVal name As String) As Boolean
        If Not attSet.get_NameIsUsed("iLogicEntityName") Then
            Return False
        End If

        Dim attribute As Inventor.Attribute = attSet("iLogicEntityName")

        If CStr(attribute.Value) <> name Then
            Return False
        End If

        Dim attribute2 As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSet", "iLogicEntityNamesOrdered")
        UpdateOrderedNames(attribute2, String.Empty, name)
        Call New NamedEntityGraphics(CType(m_doc, PartDocument), Nothing, Nothing).Delete(name)
        attribute.Delete()
        attSet("iLogicEntityNameFeatureName").Delete()
        attSet.Delete()
        Dim attribute3 As Inventor.Attribute = GetAttribute(m_doc.AttributeSets, "iLogicEntityNameSetTransient", "iLogicEntityNamesVisible")

        If attribute3 IsNot Nothing Then
            UpdateOrderedNames(attribute3, String.Empty, name)
        End If

        Return True
    End Function

    Private Function GetNativeObject(ByVal entityObject As Object) As Object
        Select Case CadObjectUtil.GetObjectType(entityObject)
            Case ObjectTypeEnum.kFaceProxyObject
                Return (CType(entityObject, FaceProxy)).NativeObject
            Case ObjectTypeEnum.kEdgeProxyObject
                Return (CType(entityObject, EdgeProxy)).NativeObject
            Case ObjectTypeEnum.kVertexProxyObject
                Return (CType(entityObject, VertexProxy)).NativeObject
            Case Else
                Return entityObject
        End Select
    End Function

    Private Function GetEntityAttSets(ByVal entityObject As Object) As AttributeSets
        Select Case CadObjectUtil.GetObjectType(entityObject)
            Case ObjectTypeEnum.kFaceObject
                Return (CType(entityObject, Face)).AttributeSets
            Case ObjectTypeEnum.kEdgeObject
                Return (CType(entityObject, Edge)).AttributeSets
            Case ObjectTypeEnum.kVertexObject
                Return (CType(entityObject, Vertex)).AttributeSets
            Case Else
                Return Nothing
        End Select
    End Function

    Private Sub UpdateOrderedNames(ByVal orderAtt As Inventor.Attribute, ByVal newName As String, ByVal oldName As String)
        Dim wasOrdered As Boolean = False
        Dim namesFromAttribute As List(Of String) = GetNamesFromAttribute(orderAtt, wasOrdered)
        Dim num As Integer = -1

        If Not String.IsNullOrEmpty(oldName) Then
            num = namesFromAttribute.IndexOf(oldName)
        End If

        If Not String.IsNullOrEmpty(newName) Then

            If num <> -1 Then
                namesFromAttribute(num) = newName
            Else
                namesFromAttribute.Add(newName)
            End If
        ElseIf String.IsNullOrEmpty(oldName) Then
            wasOrdered = True
        ElseIf num <> -1 Then
            namesFromAttribute.RemoveAt(num)
        End If

        Dim stringBuilder As StringBuilder = New StringBuilder()

        If wasOrdered Then
            stringBuilder.Append(vbTab)
            namesFromAttribute.Sort()
        End If

        For Each item As String In namesFromAttribute
            stringBuilder.Append(item & vbTab)
        Next

        orderAtt.Value = stringBuilder.ToString()
    End Sub

    Private Function GetNamesFromAttribute(ByVal orderAtt As Inventor.Attribute, ByRef wasOrdered As Boolean) As List(Of String)
        Dim Text As String = TryCast(orderAtt.Value, String)
        wasOrdered = (text.Length > 0 AndAlso text(0) = vbTab)
        Dim array As Char() = New Char(0) {vbTab}
        Dim array2 As String() = text.Split(array, StringSplitOptions.RemoveEmptyEntries)
        Dim list As List(Of String) = New List(Of String)(array2.Length)
        Dim array3 As String() = array2

        For i As Integer = 0 To array3.Length - 1
            Dim item As String = array3(i).Trim(array)
            list.Add(item)
        Next

        Return list
    End Function

    Function GetFeaturesString(ByVal entity As Object) As String
	    Select Case True 'CadObjectUtil.GetObjectType(entity)
	        Case TypeOf entity Is Face
	            Dim ReferenceKey As Byte() = New Byte() {}
				Dim selectedFace As Face = entity
	            selectedFace.CreatedByFeature.GetReferenceKey(ReferenceKey)
	            Dim ReferenceKeyManager As ReferenceKeyManager = m_doc.ReferenceKeyManager
	            Dim ReferenceKey2 As Byte() = ReferenceKey
	            Return ReferenceKeyManager.KeyToString(ReferenceKey2) & vbTab
	        Case TypeOf entity Is Edge
	            Return GetFeaturesString((CType(entity, Edge)).Faces)
	        Case TypeOf entity Is Vertex
	            Return GetFeaturesString((CType(entity, Vertex)).Faces)
	        Case Else
	            Return String.Empty
	    End Select
	End Function

'    <CompilerGenerated>
    Private Function _003CGetFeaturesString_003Eg__GetFacesString_007C32_0(ByVal faces As Faces) As String
        Dim hashSet As HashSet(Of String) = New HashSet(Of String)()
        Dim ReferenceKey As Byte() = New Byte(-1) {}

        For Each face As Face In faces
            Face.CreatedByFeature.GetReferenceKey(ReferenceKey)
            Dim hashSet2 As HashSet(Of String) = hashSet
            Dim referenceKeyManager As ReferenceKeyManager = m_doc.ReferenceKeyManager
            Dim ReferenceKey2 As Byte() = ReferenceKey
            hashSet2.Add(referenceKeyManager.KeyToString(ReferenceKey2))
        Next

        Dim stringBuilder As StringBuilder = New StringBuilder()

        For Each item As String In hashSet
            stringBuilder.Append(item)
            stringBuilder.Append(vbTab)
        Next

        Return stringBuilder.ToString()
    End Function
End Class

Public Class EntityAttributeSetBase
    Public Enum CreateAtt
        No
        [New]
        NewTransient
    End Enum

    Protected Const EntitySetName As String = "iLogicEntityNameSet"
    Protected Const EntitySetNameTransient As String = "iLogicEntityNameSetTransient"
    Protected ReadOnly m_doc As Document
	Protected thisapplication As Inventor.Application
    Protected m_transactionName As String = Titles.iLogic
    Protected m_usedNames As HashSet(Of String)

    Public ReadOnly Property Document As Document
        Get
            Return m_doc
        End Get
    End Property

    Public Sub New(ByVal app As Inventor.Application, ByVal doc As Document)
        m_doc = doc
		thisapplication = app
    End Sub

    Public Overridable Function GetEntityName(ByVal entityObject As Object) As String
        Return String.Empty
    End Function

    Public Overridable Function GetEntity(ByVal name As String) As Object
        Return Nothing
    End Function

    Public Overridable Function ContainsName(ByVal name As String) As Boolean
        Return m_usedNames.Contains(name)
    End Function

    Public Sub SetTransactionName(ByVal transactionName As String)
        m_transactionName = transactionName
    End Sub

    Public Function GetAttribute(ByVal attSets As AttributeSets, ByVal attSetName As String, ByVal attName As String, ByVal Optional Opt As CreateAtt = CreateAtt.No, ByVal Optional newValue As Object = Nothing, ByVal Optional valType As ValueTypeEnum = ValueTypeEnum.kStringType) As Inventor.Attribute
        Dim AttributeSet As AttributeSet

        If attSets.get_NameIsUsed(attSetName) Then
            AttributeSet = attSets(attSetName)
        Else

            Select Case [option]
                Case CreateAtt.[New]
                    AttributeSet = attSets.Add(attSetName)
                Case CreateAtt.NewTransient
                    AttributeSet = attSets.AddTransient(attSetName)
                Case Else
                    Return Nothing
            End Select
        End If

        Dim result As Inventor.Attribute = Nothing

        If AttributeSet.get_NameIsUsed(attName) Then
            result = attributeSet(attName)
        ElseIf [option] <> 0 Then
            AttributeSet.Add(attName, valType, newValue)
        End If

        Return result
    End Function

    Function StartTxn() As Transaction
        Dim TransactionManager As TransactionManager = thisapplication.TransactionManager
        Dim Transaction As Transaction = Nothing

'        If Not TransactionUtil.InIdentifiedTransaction(TransactionManager) Then
            Transaction = TransactionManager.StartTransaction(CType(m_doc, _Document), m_transactionName)
'            iLogicCentral.Instance.TransactionIds.Add(Transaction.Id)
'        End If

        Return Transaction
    End Function

    Protected Sub OnCatchTxnError(ByVal Trans As Transaction)
		If Not Trans Is Nothing Then Trans.Abort()
    End Sub

    Protected Sub OnEndTxn(ByVal Trans As Transaction)
        If Not Trans Is Nothing Then Trans.End()
    End Sub
End Class


Class EntityNaming
    Private ReadOnly m_selectedObjectType As ObjectTypeEnum
    Private ReadOnly m_entityNamesSet As EntityAttributeSetBase
    Private ReadOnly m_entityObject As Object
    Private m_workFeaturesNames As HashSet(Of String)
    Private Shared ReadOnly m_invalidCharacters As Char() = New Char(1) {""""c, "\"c}
    Public Shared ReadOnly AssemblyKeyStr As String = "Proxy:"

    Public Sub New(ByVal entityNamesSet As EntityAttributeSetBase, ByVal selectedObject As Object)
        m_entityNamesSet = entityNamesSet
        m_entityObject = selectedObject
        Dim Edge As Edge = TryCast(selectedObject, Edge)
        Dim Vertex As Vertex = TryCast(selectedObject, Vertex)
        Dim obj As Face = Nothing

        If CSharpImpl.__Assign(obj, TryCast(selectedObject, Face)) IsNot Nothing Then
            m_selectedObjectType = ObjectTypeEnum.kFaceObject
        ElseIf Edge IsNot Nothing Then
            m_selectedObjectType = ObjectTypeEnum.kEdgeObject
        ElseIf Vertex IsNot Nothing Then
            m_selectedObjectType = ObjectTypeEnum.kVertexObject
        End If
    End Sub

    Public Function AutoName() As String
        Dim empty As String = String.Empty
        Dim EntityNameListAttributeSet As EntityNameListAttributeSet = TryCast(m_entityNamesSet, EntityNameListAttributeSet)

        If EntityNameListAttributeSet IsNot Nothing Then
            Dim entityName As String = m_entityNamesSet.GetEntityName(m_entityObject)

            If Not String.IsNullOrEmpty(entityName) Then
                Return entityName
            End If
        End If

        Select Case m_selectedObjectType
            Case ObjectTypeEnum.kEdgeObject
                empty = Titles.Edge
            Case ObjectTypeEnum.kFaceObject
                empty = Titles.Face
            Case ObjectTypeEnum.kVertexObject
                empty = Titles.Vertex
            Case Else
                empty = "Unknown object"
        End Select

        If EntityNameListAttributeSet Is Nothing Then
            empty = AssemblyKeyStr & empty
        End If

        Return AutoNameAdjust(empty)
    End Function

    Public Function CheckName(ByVal newName As String) As Boolean
        If String.IsNullOrEmpty(newName) Then
            Return True
        End If

        If newName.IndexOfAny(m_invalidCharacters) <> -1 Then
            Return False
        End If

        If newName.Contains(AssemblyKeyStr) Then
            Return False
        End If

        If ConflictWithWorkFeatureName(newName) Then
            Return False
        End If

        For i As Integer = 0 To newName.Length - 1

            If Char.IsControl(newName(i)) Then
                Return False
            End If
        Next

        Return CheckNameAndRef(newName)
    End Function

    Private Function CheckNameAndRef(ByVal newName As String) As Boolean
        Dim entityName As String = m_entityNamesSet.GetEntityName(m_entityObject)

        If entityName IsNot Nothing AndAlso String.Equals(entityName, newName, StringComparison.OrdinalIgnoreCase) Then
            Return True
        End If

        If m_entityNamesSet.ContainsName(newName) Then
            Return False
        End If

        Return True
    End Function

    Public Function AutoNameAdjust(ByVal baseName As String) As String
        For i As Integer = 0 To 1000 - 1
            Dim Text As String = baseName & i.ToString(CultureInfo.InvariantCulture)

            If Not m_entityNamesSet.ContainsName(Text) AndAlso Not ConflictWithWorkFeatureName(Text) Then
                Return Text
            End If
        Next

        Return baseName & "a"
    End Function

    Public Function ConflictWithWorkFeatureName(ByVal name As String) As Boolean
        Dim PartDocument As PartDocument = Nothing, AssemblyDocument As AssemblyDocument = Nothing

        If m_workFeaturesNames Is Nothing Then
            m_workFeaturesNames = New HashSet(Of String)(StringComparer.OrdinalIgnoreCase)

            If CSharpImpl.__Assign(partDocument, TryCast(m_entityNamesSet.Document, partDocument)) IsNot Nothing Then
                Dim componentDefinition As PartComponentDefinition = partDocument.ComponentDefinition

                For Each workPlane3 As WorkPlane In componentDefinition.WorkPlanes
                    m_workFeaturesNames.Add(workPlane3.Name)
                Next

                For Each workPoint3 As WorkPoint In componentDefinition.WorkPoints
                    m_workFeaturesNames.Add(workPoint3.Name)
                Next

                For Each workAxis3 As WorkAxis In componentDefinition.WorkAxes
                    m_workFeaturesNames.Add(workAxis3.Name)
                Next
            Else

                If CSharpImpl.__Assign(assemblyDocument, TryCast(m_entityNamesSet.Document, assemblyDocument)) IsNot Nothing Then
                    Dim componentDefinition2 As AssemblyComponentDefinition = assemblyDocument.ComponentDefinition

                    For Each workPlane4 As WorkPlane In componentDefinition2.WorkPlanes
                        m_workFeaturesNames.Add(workPlane4.Name)
                    Next

                    For Each workPoint4 As WorkPoint In componentDefinition2.WorkPoints
                        m_workFeaturesNames.Add(workPoint4.Name)
                    Next

                    For Each workAxis4 As WorkAxis In componentDefinition2.WorkAxes
                        m_workFeaturesNames.Add(workAxis4.Name)
                    Next
                End If
            End If
        End If

        Return m_workFeaturesNames.Contains(name)
    End Function

    Private Class CSharpImpl
        <Obsolete("Please refactor calling code to use normal Visual Basic assignment")>
        Shared Function __Assign(Of T)(ByRef target As T, value As T) As T
            target = value
            Return value
        End Function
    End Class
End Class

Class Titles
    Private Shared resourceMan As ResourceManager
    Private Shared resourceCulture As CultureInfo

'    <EditorBrowsable(EditorBrowsableState.Advanced)>
    Friend Shared ReadOnly Property ResourceManager As ResourceManager
        Get

            If resourceMan Is Nothing Then
                resourceMan = New ResourceManager("Autodesk.iLogic.Core.Resources.Titles", GetType(Titles).Assembly)
            End If

            Return resourceMan
        End Get
    End Property

'    <EditorBrowsable(EditorBrowsableState.Advanced)>
    Friend Shared Property Culture As CultureInfo
        Get
            Return resourceCulture
        End Get
        Set(ByVal value As CultureInfo)
            resourceCulture = value
        End Set
    End Property

    Friend Shared ReadOnly Property AddiLogicRule As String
        Get
            Return ResourceManager.GetString("AddiLogicRule", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property CompileErrors As String
        Get
            Return ResourceManager.GetString("CompileErrors", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property deletedParameter As String
        Get
            Return ResourceManager.GetString("deletedParameter", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property Edge As String
        Get
            Return ResourceManager.GetString("Edge", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property EventDrivenRule As String
        Get
            Return ResourceManager.GetString("EventDrivenRule", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property Face As String
        Get
            Return ResourceManager.GetString("Face", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property iLogic As String
        Get
            Return ResourceManager.GetString("iLogic", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property Rule As String
        Get
            Return ResourceManager.GetString("Rule", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property UnknownDocument As String
        Get
            Return ResourceManager.GetString("UnknownDocument", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property UnmanageOrDeleteItems As String
        Get
            Return ResourceManager.GetString("UnmanageOrDeleteItems", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property UnmanageOrDeleteItemsTitle As String
        Get
            Return ResourceManager.GetString("UnmanageOrDeleteItemsTitle", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property Update As String
        Get
            Return ResourceManager.GetString("Update", resourceCulture)
        End Get
    End Property

    Friend Shared ReadOnly Property Vertex As String
        Get
            Return ResourceManager.GetString("Vertex", resourceCulture)
        End Get
    End Property

    Friend Sub New()
    End Sub
End Class

Class NamedEntity
    Public Property Name As String
    Public Property Entity As Object

    Friend Sub New(ByVal name As String, ByVal entity As Object)
        Name = name
        Entity = entity
    End Sub
End Class

Private Class CSharpImpl
    <Obsolete("Please refactor calling code to use normal Visual Basic assignment")>
    Shared Function __Assign(Of T)(ByRef target As T, value As T) As T
        target = value
        Return value
    End Function
End Class	